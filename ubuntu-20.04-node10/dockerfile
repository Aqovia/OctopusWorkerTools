FROM ubuntu:20.04

ARG DotnetSdkVersion=6.0
ARG KubeloginVersion=v0.0.31
ARG OctopusCliVersion=9.1.7
ARG OctopusClientVersion=14.3.722
ARG PowershellVersion=7.2.12-1.deb
ARG NodejsVersion=10

# Basic tools
RUN apt-get update -qq && \
    apt-get install -qq -y wget unzip apt-utils curl software-properties-common iputils-ping

# PowerShell
RUN wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb && \
    apt-get update -qq && \
    add-apt-repository universe && \
    apt-get install -qq -y powershell=${PowershellVersion}

# Disable colors in PowerShell
RUN pwsh -c 'mkdir -p "$(dirname $profile)"; touch $profile; echo "`$PSStyle.OutputRendering = `"PlainText`"" >> $profile; . $profile'

# Octo CLI
# https://octopus.com/downloads/octopuscli#linux
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends gnupg curl ca-certificates apt-transport-https && \
    curl -sSfL https://apt.octopus.com/public.key | apt-key add - && \
    sh -c "echo deb https://apt.octopus.com/ stable main > /etc/apt/sources.list.d/octopus.com.list" && \
    apt-get update -qq && \
    apt-get install -qq -y octopuscli=${OctopusCliVersion}

# Octopus Client
# https://octopus.com/docs/octopus-rest-api/octopus.client
RUN pwsh -c 'Install-Package -Force Octopus.Client -MaximumVersion "'${OctopusClientVersion}'" -source https://www.nuget.org/api/v2 -SkipDependencies' && \
    octopusClientPackagePath=$(pwsh -c '(Get-Item ((Get-Package Octopus.Client).source)).Directory.FullName') && \
    cp -r $octopusClientPackagePath/lib/netstandard2.0/* .

# AZ Powershell core modules
# https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-3.6.1
RUN pwsh -c 'Install-Module -Force -Name Az -AllowClobber -Scope AllUsers'

# Helm3
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh

# .NET SDK 6.0
# https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu-2004
# https://learn.microsoft.com/en-us/dotnet/core/install/linux-package-mixup
RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb && \
    rm packages-microsoft-prod.deb && \
    apt-get install -qq -y apt-transport-https && \
    apt-get update -qq && \
    apt-get install -qq -y dotnet-sdk-${DotnetSdkVersion}

# Libssl 1.1, required for Azure CLI as of Ubuntu 20.04.
# This can be removed when a proper Azure CLI ubuntu 20.04 version is avaliable
RUN wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb && \
    dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb && \
    rm -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb

# Azure CLI
# https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt#option-1-install-with-one-command
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash
RUN az upgrade

# Bicep using Azure CLI
# https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/install#azure-cli
RUN az bicep install
RUN az bicep upgrade

# NodeJS
# https://websiteforstudents.com/how-to-install-node-js-10-11-12-on-ubuntu-16-04-18-04-via-apt-and-snap/\
RUN wget --quiet -O - https://deb.nodesource.com/setup_${NodejsVersion}.x | bash && \
    apt-get install -qq -y nodejs

# Kubectl
# https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
RUN apt-get update && \
    apt-get install -y ca-certificates curl apt-transport-https && \
    mkdir -m 755 /etc/apt/keyrings && \
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list && \
    apt-get update && \
    apt-get install -qq -y kubectl

# Kubelogin
RUN wget --quiet https://github.com/Azure/kubelogin/releases/download/${KubeloginVersion}/kubelogin-linux-amd64.zip && \
    unzip kubelogin-linux-amd64.zip -d kubelogin-linux-amd64 && \
    mv kubelogin-linux-amd64/bin/linux_amd64/kubelogin /usr/local/bin && \
    rm -rf kubelogin-linux-amd64 && \
    rm kubelogin-linux-amd64.zip
